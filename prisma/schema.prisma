// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  discordId        String?   @unique
  preferredCurrency String?  @default("USD")
  accounts         Account[]
  sessions         Session[]
  tickets          Ticket[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ticket {
  id            String    @id @default(cuid())
  userId        String
  purchaseDate  DateTime?
  eventDate     DateTime?
  artist        String?
  location      String?
  section       String?
  row           String?
  seat          String?
  email         String?
  orderNumber   String?
  buyInPrice    Float?
  salePrice     Float?
  profit        Float?
  currency      String?   @default("USD")
  saleId        String?
  platform      String?
  status        String?
  siteSold      String?
  deliveryEmail String?
  deliveryName  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([platform])
  @@index([status])
}
